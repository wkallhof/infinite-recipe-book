@page "/recipe/{id:guid}"
@using Microsoft.AspNetCore.Components
@using InfiniteRecipeBook.Common

@using InfiniteRecipeBook.Persistence
@inject InfiniteRecipeBook.OpenAI.OpenAIClient Client
@inject RecipeRepository RecipeRepository

  <section class="mt-3">
    <div class="container">
        <div class="columns is-centered is-vcentered">
            <div class="column is-4">
                <h1 class="title is-size-1">@RecipeModel.Title</h1>
                <p class="is-size-4">@RecipeModel.ShortDescription</p>
            </div>
            <div class="column is-6">
                <figure class="image is-square">
                    <img src="data:image/png;base64,@RecipeModel.Base64Image">
                </figure>
            </div>
        </div>
    </div>
  </section>

  <hr>

<section>
    <div class="container">
        <div class="columns is-centered is-vcentered">
            <div class="column is-4">
                <div class="field has-addons">
                <p class="control">
                    <button class="button">
                        <span class="icon is-small">
                            <i class="fas fa-heart"></i>
                        </span>
                        <span>Save</span>
                    </button>
                </p>
                <p class="control">
                    <button class="button">
                        <span class="icon is-small">
                            <i class="fas fa-share-alt"></i>
                        </span>
                        <span>Share</span>
                    </button>
                </p>
                <p class="control">
                    <button class="button" @onclick="LoadData">
                        <span class="icon is-small">
                            <i class="fas fa-blender"></i>
                        </span>
                        <span>Remix</span>
                    </button>
                </p>
                </div>
            </div>
            <div class="column is-6 content is-size-5">
                <p>@RecipeModel.LongDescription</p>
            </div>
        </div>
    </div>
</section>

<section class="mt-6">
    <div class="container">
        <div class="columns is-centered is-vcentered">
            <div class="column is-4  is-size-5">
                <strong>Ingredients:</strong>
                @if(IsLoading)
                {
                    <progress class="progress is-small is-primary" max="100">15%</progress>
                }
                else{
                    <ul>
                        @foreach(var ingredient in RecipeModel.Ingredients)
                        {
                            <li>@ingredient</li>
                        }
                    </ul>
                }

            </div>
            <div class="column is-6 content is-size-5">
                <strong>Directions:</strong>
                @if(IsLoading)
                {
                    <progress class="progress is-small is-primary" max="100">15%</progress>
                }
                else{
                    <ol>
                        @foreach(var step in RecipeModel.Directions)
                        {
                            <li>@step</li>
                        }
                    </ol>
                }
            </div>
        </div>
    </div>
</section>


@code {
    public RecipeRecord RecipeModel { get; set; }
    public bool IsLoading = false;

    [Parameter]
    public Guid Id { get; set; }

    protected override void OnInitialized()
    {
        RecipeModel = RecipeRepository.Get(Id);

        if (RecipeModel.LongDescription == null || !RecipeModel.Ingredients.Any() || !RecipeModel.Directions.Any())
        {
            LoadData();
        }
        else{
            IsLoading = false;
        }
    }

    private async Task LoadData()
    {
        IsLoading = true;
        var result = await Client.GenerateData<RecipeDetailsQuery>($"Given a recipe title: \"{RecipeModel.Title}\" and its short description: \"{RecipeModel.ShortDescription}\", generate a list of ingredients, directions, and a long description that matches.");
        RecipeModel.Ingredients = result.Ingredients;
        RecipeModel.Directions = result.Directions;
        RecipeModel.LongDescription = result.LongDescription;
        RecipeRepository.Update(RecipeModel);
        IsLoading = false;
        StateHasChanged();
    }

    public class RecipeDetailsQuery
    {
        public List<string> Ingredients { get; set; } = new List<string>();
        public List<string> Directions { get; set; } = new List<string>();
        public string LongDescription { get; set; }
    }
}